# -*- coding: utf-8 -*-
"""GPA CALCULATOR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l7kVLeN2ouyI96dSazeKX58_GEtrWAEw
"""

def calculate_overall_grade(components):
    total_grade = 0

    for component, details in components.items():
        total_marks_obtained = sum(detail[0] for detail in details)
        total_marks_possible = sum(detail[1] for detail in details)
        weight = details[0][2]
        percentage_obtained = (total_marks_obtained / total_marks_possible) * 100
        weighted_marks = percentage_obtained * (weight / 100)
        total_grade += weighted_marks
        print(f"  {component}: Total Marks Obtained = {total_marks_obtained}, Total Marks = {total_marks_possible}, Weight = {weight}%, Weighted Marks = {weighted_marks:.2f}")

    return total_grade

def get_float_input(prompt):
    while True:
        try:
            return float(input(prompt))
        except ValueError:
            print("Invalid input. Please enter a number.")

def get_int_input(prompt):
    while True:
        try:
            return int(input(prompt))
        except ValueError:
            print("Invalid input. Please enter an integer.")

def edit_component(components, component_name):
    if component_name in components:
        while True:
            try:
                print(f"Editing {component_name}:")
                marks_obtained = get_float_input("Enter the marks obtained: ")
                total_marks = get_float_input("Enter the total marks: ")
                weight = get_float_input("Enter the percentage contribution towards the overall grade: ")
                components[component_name] = [(marks_obtained, total_marks, weight)]
                break
            except ValueError as e:
                print(f"Error: {e}")
                continue
    else:
        print(f"No component named {component_name} found.")

def grade_to_grade_point(overall_grade):
    if overall_grade >= 90:
        return 10  # A
    elif overall_grade >= 85:
        return 9  # A-
    elif overall_grade >= 75:
        return 8  # B
    elif overall_grade >= 65:
        return 7  # B-
    elif overall_grade >= 55:
        return 6  # C
    elif overall_grade >= 50:
        return 5  # C-
    elif overall_grade >= 45:
        return 4  # D
    elif overall_grade >= 40:
        return 2  # E
    else:
        return 0  # F

def main():
    calculation_type = input("Would you like to calculate the whole semester GPA or just the subject final grades? (Enter 'GPA' for semester GPA or 'subject' for subject final grades): ").strip().lower()

    if calculation_type not in ['gpa', 'subject']:
        print("Invalid input. Please enter 'GPA' or 'subject'.")
        return

    subjects = {}
    num_subjects = get_int_input("Enter the number of subjects: ")

    for _ in range(num_subjects):
        subject_name = input("Enter the subject name: ")
        components = {}

        # Add fixed components
        for fixed_component in ["Midterm", "Endterm"]:
            include_component = input(f"  Has the {fixed_component} happened? (yes/no): ").strip().lower()
            if include_component == "yes":
                while True:
                    try:
                        print(f"  {fixed_component}:")
                        marks_obtained = get_float_input(f"    Enter the marks obtained: ")
                        total_marks = get_float_input(f"    Enter the total marks: ")
                        weight = get_float_input(f"    Enter the percentage contribution of {fixed_component} towards the overall grade: ")
                        components[fixed_component] = [(marks_obtained, total_marks, weight)]
                        break
                    except ValueError as e:
                        print(f"Error: {e}")
                        continue

        num_custom_components = get_int_input(f"Enter the number of additional components for {subject_name}: ")

        for _ in range(num_custom_components):
            component_name = input("  Enter the component name: ")
            num_instances = get_int_input(f"  Enter the number of instances for {component_name} (e.g., number of assignments): ")
            details = []

            for i in range(num_instances):
                while True:
                    try:
                        print(f"    Instance {i+1}:")
                        marks_obtained = get_float_input(f"      Enter the marks obtained: ")
                        total_marks = get_float_input(f"      Enter the total marks: ")
                        details.append((marks_obtained, total_marks, 0))  # 0 is a placeholder for weight
                        break
                    except ValueError as e:
                        print(f"Error: {e}")
                        continue

            while True:
                try:
                    weight = get_float_input(f"  Enter the percentage contribution of {component_name} towards the overall grade: ")
                    for i in range(num_instances):
                        details[i] = (details[i][0], details[i][1], weight)
                    components[component_name] = details
                    break
                except ValueError as e:
                    print(f"Error: {e}")
                    continue

        subjects[subject_name] = components

        while True:
            print("\nDo you want to edit any component? (yes/no)")
            edit_choice = input().strip().lower()
            if edit_choice == "yes":
                component_to_edit = input("Enter the name of the component to edit: ")
                edit_component(components, component_to_edit)
            elif edit_choice == "no":
                break
            else:
                print("Invalid choice. Please enter 'yes' or 'no'.")

    if calculation_type == 'gpa':
        total_grade_points = 0
        total_credits = 0

        for subject, components in subjects.items():
            print(f"\nSubject: {subject}")
            overall_grade = calculate_overall_grade(components)
            grade_point = grade_to_grade_point(overall_grade)
            # Assuming each subject has equal credits, e.g., 3 credits each
            credits = 3
            total_grade_points += grade_point * credits
            total_credits += credits
            print(f"  Overall Grade for {subject}: {overall_grade:.2f}, Grade Point: {grade_point}, Credits: {credits}")

        semester_gpa = total_grade_points / total_credits if total_credits > 0 else 0
        print(f"\nSemester GPA: {semester_gpa:.2f}")
    else:
        for subject, components in subjects.items():
            print(f"\nSubject: {subject}")
            overall_grade = calculate_overall_grade(components)
            print(f"  Overall Grade for {subject}: {overall_grade:.2f}")

if __name__ == "__main__":
    main()